//你有一个带有四个圆形拨轮的转盘锁。每个拨轮都有10个数字： '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' 。每个拨轮可以自由旋转：例如把 '9' 变为 '0'，'0' 变为 '9' 。每次旋转都只能旋转一个拨轮的一位数字。 
//
// 锁的初始数字为 '0000' ，一个代表四个拨轮的数字的字符串。 
//
// 列表 deadends 包含了一组死亡数字，一旦拨轮的数字和列表里的任何一个元素相同，这个锁将会被永久锁定，无法再被旋转。 
//
// 字符串 target 代表可以解锁的数字，你需要给出最小的旋转次数，如果无论如何不能解锁，返回 -1。 
//
// 
//
// 示例 1: 
//
// 
//输入：deadends = ["0201","0101","0102","1212","2002"], target = "0202"
//输出：6
//解释：
//可能的移动序列为 "0000" -> "1000" -> "1100" -> "1200" -> "1201" -> "1202" -> "0202"。
//注意 "0000" -> "0001" -> "0002" -> "0102" -> "0202" 这样的序列是不能解锁的，
//因为当拨动到 "0102" 时这个锁就会被锁定。
// 
//
// 示例 2: 
//
// 
//输入: deadends = ["8888"], target = "0009"
//输出：1
//解释：
//把最后一位反向旋转一次即可 "0000" -> "0009"。
// 
//
// 示例 3: 
//
// 
//输入: deadends = ["8887","8889","8878","8898","8788","8988","7888","9888"], target = "8888"
//输出：-1
//解释：
//无法旋转到目标数字且不被锁定。
// 
//
// 示例 4: 
//
// 
//输入: deadends = ["0000"], target = "8888"
//输出：-1
// 
//
// 
//
// 提示： 
//
// 
// 死亡列表 deadends 的长度范围为 [1, 500]。 
// 目标数字 target 不会在 deadends 之中。 
// 每个 deadends 和 target 中的字符串的数字会在 10,000 个可能的情况 '0000' 到 '9999' 中产生。 
// 
// Related Topics 广度优先搜索

package leetcode.editor.cn;

import java.util.*;

//Java：打开转盘锁
// 33/43
@SuppressWarnings("all")
public class P752OpenTheLock {
    public static void main(String[] args) {
        Solution solution = new P752OpenTheLock().new Solution();
        // TO TEST
        String[] deadends = {"7867", "6676", "8687", "7886", "6768", "8877", "6767", "6676", "6666", "7876", "6688", "6677", "6877", "7786", "6778", "6868", "6868", "7867", "7668", "7666", "8868", "7887", "6788", "7687", "7788", "7877", "6867", "6867", "7876", "8787", "8878", "6668", "6878", "6766", "8667", "8688", "6788", "7687", "8887", "8766", "6867", "8867", "7866", "7866", "6686", "7776", "8687", "7888", "6777", "6678", "6678", "6686", "6677", "7886", "6876", "8666", "6667", "7768", "7688", "7668", "6786", "7766", "7867", "8866", "7887", "6676", "8776", "6867", "8888", "6678", "8687", "6868", "7888", "8666", "6678", "6668", "7678", "7667", "8786", "8768", "6766", "8776", "8677", "7788", "7868", "7878", "6786", "6678", "6876", "7667", "8866", "8666", "8768", "8886", "8787", "8688", "8766", "8867", "7886", "6876", "7776", "7867", "8668", "7777", "8888", "7767", "8778", "8888", "6876", "8777", "7877", "8866", "8668", "8878", "7678", "8787", "7788", "8887", "8667", "7887", "6686", "8778", "7768", "8787", "7677", "6768", "7877", "7788", "7768", "6768", "6786", "7887", "7768", "6676", "6777", "8686", "7867", "8788", "8887", "8776", "7677", "8786", "8678", "7666", "8776", "7676", "6767", "8776", "8888", "8766", "8876", "7777", "7677", "6767", "7878", "7868", "8677", "7677", "8788", "6667", "8866", "8887", "6686", "6777", "6676", "8787", "6788", "8866", "6767", "8676", "8868", "8768", "8888", "7866", "7877", "7768", "7686", "7888", "6666", "6887", "6787", "7667", "6676", "8666", "8886", "8878", "8678", "8868", "8888", "8867", "7878", "7787", "8776", "7877", "6788", "8778", "6768", "8677", "8678", "6778", "7888", "6866", "6768", "6666", "6887", "8866", "7676", "7866", "7876", "7678", "7686", "8887", "7676", "6788", "8787", "6666", "8866", "6876", "8676", "8688", "8887", "7887", "7777", "8887", "8688", "6668", "6686", "6887", "7677", "6867", "6786", "6877", "7788", "6667", "8778", "8786", "8767", "7778", "8867", "8877", "6668", "8886", "7888", "7767", "7666", "8678", "8668", "8767", "7666", "6787", "6886", "8787", "6886", "8768", "8767", "8676", "6767", "8776", "8768", "8687", "8778", "7888", "6768", "7878", "6668", "7688", "6687", "7866", "8878", "6877", "7667", "8886", "7876", "6667", "8877", "7666", "7668", "7676", "6888", "6686", "7666", "7688", "7666", "6678", "6676", "7678", "8788", "7667", "7767", "8766", "6867", "8767", "8676", "8786", "8667", "6678", "6778", "8877", "8788", "6866", "7687", "6876", "8878", "8866", "6788", "6877", "8768", "8778", "8778", "8866", "7866", "7887", "7878", "8766", "8778", "7868", "8787", "6676", "8668", "7866", "8787", "8767", "6876", "8867", "6688", "6886", "6668", "6878", "7866", "8678", "8867", "7667", "7878", "8778", "8777", "7866", "8878", "7868", "6876", "7688", "7677", "7678", "7777", "8888", "8776", "8688", "6878", "8877", "7678", "7777", "7878", "6678", "6688", "6868", "8876", "6668", "8877", "8786", "6688", "8766", "8887", "6678", "8886", "8876", "8888", "8878", "6786", "7686", "7867", "7767", "7888", "8866", "6876", "7767", "6687", "6687", "6688", "6868", "8668", "6886", "8686", "7766", "8777", "8667", "8886", "7676", "7768", "6788", "8688", "7676", "7686", "8777", "7886", "7788", "6666", "7687", "6676", "6777", "6866", "6767", "7787", "7877", "6777", "6886", "7877", "7787", "7787", "8768", "7787", "8778", "6766", "7677", "6788", "6786", "6767", "8687", "6687", "8668", "6876", "6666", "7676", "8667", "6688", "6766", "6677", "7667", "8668", "8866", "7686", "8866", "8687", "8866", "8768", "7886", "6877", "8877", "6676", "6887", "6788", "8877", "8887", "8886", "8887", "6676", "8867", "6867", "7768", "8868", "6668", "7878", "7887", "8768", "6876", "7787", "7876", "8886", "6778", "7778", "7687", "6686", "7787", "8767", "8668", "7686", "7678", "8788", "6687", "8666", "7877", "6668", "7686", "6866", "6888", "8786", "7778", "7786", "8787", "6777", "6867", "7787", "7777", "6766", "8666", "6778", "6867", "8668", "8667", "7678", "8668", "7677", "8787", "6876", "6668", "7788", "7688", "7687", "8778", "8787", "8688", "8867"};
        String target = "6776";
//        String[] deadends = {"8887","8889","8878","8898","8788","8988","7888","9888"};
//        String target = "8888";
        int ret = solution.openLock(deadends, target);
        System.out.println(ret);
    }


    //leetcode submit region begin(Prohibit modification and deletion)
    class Solution {
        public int openLock(final String[] deadends, String target) {
            Set<String> deadendSet = new HashSet<String>(Arrays.asList(deadends));
            if (deadendSet.contains("0000")) {
                return -1;
            }
            return bfs(deadendSet, target, "0000");
        }

        private int bfs(Set<String> deadendSet, String target, String current) {
            Queue<String> q = new LinkedList<String>();
            Queue<String> qt = new LinkedList<String>();
            Map<String, Integer> visitMap = new HashMap<String, Integer>();
            Map<String, Integer> visitMapt = new HashMap<String, Integer>();
            q.add(current);
            qt.add(target);
            int step = 0;
            int stept = 0;
            while (!q.isEmpty() && !qt.isEmpty()) {
                int len = q.size();
                int lent = qt.size();
                if (len < lent) {
                    for (int k = 0; k < len; ++k) {
                        String top = q.poll();
                        if (visitMapt.containsKey(top)) {
                            return -1;
                        }
                        visitMap.put(top, 1);
                        for (int i = 0; i < 4; ++i) {
                            int c = Integer.parseInt(top.substring(i, i + 1));
                            int l = (c + 9) % 10;
                            int r = (c + 1) % 10;
                            String left = top.substring(0, i) + l + top.substring(i + 1);
                            String right = top.substring(0, i) + r + top.substring(i + 1);
                            if (qt.contains(left) || qt.contains(right)) {
                                return step + stept + 1;
                            }
                            if (!visitMap.containsKey(left) && !deadendSet.contains(left)) {
                                q.add(left);
                            }
                            if (!visitMap.containsKey(right) && !deadendSet.contains(right)) {
                                q.add(right);
                            }

                        }
                    }
                    ++step;
                } else {
                    for (int k = 0; k < lent; ++k) {
                        String top = qt.poll();
                        if (visitMap.containsKey(top)) {
                            return -1;
                        }
                        visitMapt.put(top, 1);
                        for (int i = 0; i < 4; ++i) {
                            int c = Integer.parseInt(top.substring(i, i + 1));
                            int l = (c + 9) % 10;
                            int r = (c + 1) % 10;
                            String left = top.substring(0, i) + l + top.substring(i + 1);
                            String right = top.substring(0, i) + r + top.substring(i + 1);
                            if (q.contains(left) || q.contains(right)) {
                                return step + stept + 1;
                            }
                            if (!visitMapt.containsKey(left) && !deadendSet.contains(left)) {
                                qt.add(left);
                            }
                            if (!visitMapt.containsKey(right) && !deadendSet.contains(right)) {
                                qt.add(right);
                            }

                        }
                    }
                    ++stept;
                }
            }
            return -1;
        }
    }
//leetcode submit region end(Prohibit modification and deletion)

}